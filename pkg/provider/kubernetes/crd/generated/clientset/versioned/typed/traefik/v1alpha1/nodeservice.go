/*
The MIT License (MIT)

Copyright (c) 2016-2019 Containous SAS

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	scheme "github.com/containous/traefik/v2/pkg/provider/kubernetes/crd/generated/clientset/versioned/scheme"
	v1alpha1 "github.com/containous/traefik/v2/pkg/provider/kubernetes/crd/traefik/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NodeServicesGetter has a method to return a NodeServiceInterface.
// A group's client should implement this interface.
type NodeServicesGetter interface {
	NodeServices(namespace string) NodeServiceInterface
}

// NodeServiceInterface has methods to work with NodeService resources.
type NodeServiceInterface interface {
	Create(*v1alpha1.NodeService) (*v1alpha1.NodeService, error)
	Update(*v1alpha1.NodeService) (*v1alpha1.NodeService, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.NodeService, error)
	List(opts v1.ListOptions) (*v1alpha1.NodeServiceList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.NodeService, err error)
	NodeServiceExpansion
}

// nodeServices implements NodeServiceInterface
type nodeServices struct {
	client rest.Interface
	ns     string
}

// newNodeServices returns a NodeServices
func newNodeServices(c *TraefikV1alpha1Client, namespace string) *nodeServices {
	return &nodeServices{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the nodeService, and returns the corresponding nodeService object, and an error if there is any.
func (c *nodeServices) Get(name string, options v1.GetOptions) (result *v1alpha1.NodeService, err error) {
	result = &v1alpha1.NodeService{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("nodeservices").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NodeServices that match those selectors.
func (c *nodeServices) List(opts v1.ListOptions) (result *v1alpha1.NodeServiceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.NodeServiceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("nodeservices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested nodeServices.
func (c *nodeServices) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("nodeservices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a nodeService and creates it.  Returns the server's representation of the nodeService, and an error, if there is any.
func (c *nodeServices) Create(nodeService *v1alpha1.NodeService) (result *v1alpha1.NodeService, err error) {
	result = &v1alpha1.NodeService{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("nodeservices").
		Body(nodeService).
		Do().
		Into(result)
	return
}

// Update takes the representation of a nodeService and updates it. Returns the server's representation of the nodeService, and an error, if there is any.
func (c *nodeServices) Update(nodeService *v1alpha1.NodeService) (result *v1alpha1.NodeService, err error) {
	result = &v1alpha1.NodeService{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("nodeservices").
		Name(nodeService.Name).
		Body(nodeService).
		Do().
		Into(result)
	return
}

// Delete takes name of the nodeService and deletes it. Returns an error if one occurs.
func (c *nodeServices) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("nodeservices").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *nodeServices) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("nodeservices").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched nodeService.
func (c *nodeServices) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.NodeService, err error) {
	result = &v1alpha1.NodeService{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("nodeservices").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
